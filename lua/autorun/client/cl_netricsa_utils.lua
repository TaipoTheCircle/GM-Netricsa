if CLIENT then
    local function CreateButton(parent, text)
        local btn = vgui.Create("DButton", parent)
        if text then
            btn:SetText(text)
        end

        -- –∑–≤—É–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        btn.OnCursorEntered = function(self)
            surface.PlaySound("netricsa/button_ssm.wav")
            self.HoveredColor = Color(255,255,255)
        end

        btn.OnCursorExited = function(self)
            self.HoveredColor = nil
        end

        -- –∑–≤—É–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ
        local oldClick = btn.DoClick
        btn.DoClick = function(self, ...)
            surface.PlaySound("netricsa/button_ssm_press.wav")
            if oldClick then oldClick(self, ...) end
        end

        -- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
        btn.Paint = function(self, w, h)
            local style = NetricsaStyle or STYLES.Revolution
            local col = self.HoveredColor or style.color
            draw.SimpleText(self:GetText(), "NetricsaText", w/2, h/2, col, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
        end

        return btn
    end

    local function EnhanceButton(btn)
        if not IsValid(btn) then
            return
        end

        -- –∑–≤—É–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        btn.OnCursorEntered = function(self)
            surface.PlaySound("netricsa/button_ssm.wav")
            self._hovered = true
        end

        btn.OnCursorExited = function(self)
            self._hovered = false
        end

        -- –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º DoClick, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∏–≥—Ä–∞–ª press
        local oldClick = btn.DoClick
        btn.DoClick = function(self, ...)
            surface.PlaySound("netricsa/button_ssm_press.wav")
            if oldClick then oldClick(self, ...) end
        end

        -- –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Paint)
        if not btn._customPaint then
            local oldPaint = btn.Paint
            btn.Paint = function(self, w, h)
                local style = NetricsaStyle or STYLES.Revolution
                local col = self._hovered and Color(255,255,255) or style.color
                draw.SimpleText(self:GetText(), "NetricsaText", w/2, h/2, col, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
                if oldPaint and oldPaint ~= DButton.Paint then
                    oldPaint(self, w, h)
                end
            end
        end
    end

    local function NoBG(p)
        if not IsValid(p) then return end
        if p.SetPaintBackground then p:SetPaintBackground(false) end
        if p.SetDrawBackground then p:SetDrawBackground(false) end
        if p.SetPaintBorderEnabled then p:SetPaintBorderEnabled(false) end
    end

    local function SetAnimatedText(rt, text, step, speed)
        if not IsValid(rt) then return end
        rt:SetText("")
        local c = NetricsaStyle.color or Color(255, 255, 0)
        rt:InsertColorChange(c.r, c.g, c.b, c.a or 255)

        local i = 0
        step = step or 2
        speed = speed or 0.01
        timer.Remove("NetricsaTextAnim")
        timer.Create("NetricsaTextAnim", speed, math.ceil(#text / step), function()
            if not IsValid(rt) then return end

            i = i + step
            local part = utf8.sub(text, i - step, i - 1)
            rt:AppendText(part)

            if i >= utf8.len(text) then
                timer.Remove("NetricsaTextAnim")
            end
        end)
    end

    local function FitModel(ent, panel)
        if not IsValid(ent) then return end

        local mn, mx = ent:GetRenderBounds()
        local size = math.max(mx.x - mn.x, mx.y - mn.y, mx.z - mn.z)
        if size <= 0 then size = 50 end

        -- üîß –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        local scale
        if size > 250 then
            scale = 180 / size       -- –∫—Ä—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ —É–º–µ–Ω—å—à–∞–µ–º
        elseif size > 100 then
            scale = 1.2              -- –æ–±—ã—á–Ω—ã–µ NPC ‚Äî —á—É—Ç—å –∫—Ä—É–ø–Ω–µ–µ
        elseif size > 60 then
            scale = 1.5              -- –º–µ–ª–∫–∏–µ ‚Äî –ø–æ–±–æ–ª—å—à–µ
        else
            scale = 80 / size        -- —Å–æ–≤—Å–µ–º –∫—Ä–æ—à–µ—á–Ω—ã–µ ‚Äî —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
        end

        scale = math.Clamp(scale, 0.05, 3)
        ent:SetModelScale(scale, 0)

        -- ‚öôÔ∏è –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        local mn2, mx2 = ent:GetRenderBounds()
        local center = (mn2 + mx2) * 0.5
        local height = mx2.z - mn2.z

        -- üîß –∫–∞–º–µ—Ä–∞ "—Å–≤–µ—Ä—Ö—É-—Å–±–æ–∫—É" —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞
        local baseDist = math.max(height * 1.8, 180) -- –±–ª–∏–∂–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö NPC
        local camOffset = Vector(baseDist, baseDist * 0.5, baseDist * 0.35)
        local camPos = center + camOffset

        panel:SetCamPos(camPos)
        panel:SetLookAt(center)
        panel:SetFOV(35)
    end

    -- –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ç–∞–±–∞ –∫ "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É" –∫–ª—é—á—É: "maps"/"enemies"/"weapons"/...
    -- –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–±–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ "maps"/"enemies"/"weapons", –ª–∏–±–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç L("tabs",...)
    local function TabKeyFromName(name)
        if not name then return nil end
        local s = tostring(name)

        -- –µ—Å–ª–∏ —É–∂–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª—é—á ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É
        if s == "maps" or s == "enemies" or s == "weapons" or s == "tactical" or s == "statistics" then
            return s
        end

        -- —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π ‚Üí –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª—é—á–∏
        local mapping = {}
        mapping[L("tabs","strategic")]  = "maps"      -- —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ = –∫–∞—Ä—Ç—ã
        mapping[L("tabs","enemies")]    = "enemies"
        mapping[L("tabs","weapons")]    = "weapons"
        mapping[L("tabs","tactical")]   = "tactical"
        mapping[L("tabs","statistics")] = "statistics"

        if mapping[s] then return mapping[s] end

        -- –ø–æ–ø—ã—Ç–∫–∞ –ø–æ "–≤—Ö–æ–∂–¥–µ–Ω–∏—é" (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –∞–Ω–≥–ª/—Ä—É—Å)
        local low = string.lower(s)
        if low:find("map") or low:find("–∫–∞—Ä—Ç–∞") or low:find("—Å—Ç—Ä–∞—Ç–µ–≥") then return "maps" end
        if low:find("enemy") or low:find("–≤—Ä–∞–≥") or low:find("–≤—Ä–∞–≥–∏") then return "enemies" end
        if low:find("weapon") or low:find("–æ—Ä—É–∂") then return "weapons" end
        if low:find("tactic") or low:find("—Ç–∞–∫—Ç–∏—á") then return "tactical" end
        if low:find("stat") or low:find("—Å—Ç–∞—Ç") then return "statistics" end

        return nil
    end

    -- Expose functions
    NetricsaUtils = {
        CreateButton = CreateButton,
        EnhanceButton = EnhanceButton,
        NoBG = NoBG,
        SetAnimatedText = SetAnimatedText,
        FitModel = FitModel,
        TabKeyFromName = TabKeyFromName
    }
end